openapi: 3.1.0
info:
  title: Core App API
  version: 1.0.0
  description: API spec for organization, entity, context, document, and authentication views.
servers:
  - url: /
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    GenericError:
      type: object
      properties:
        error:
          type: string
    RegisterRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        organization_name:
          type: string
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
        password:
          type: string
    OrganizationUpdateRequest:
      type: object
      required: [organization_name]
      properties:
        organization_name:
          type: string
          maxLength: 255
    EntityCreateRequest:
      type: object
      required: [name, type]
      properties:
        name:
          type: string
          maxLength: 255
        type:
          type: string
          enum: [startup, mentor]
    EntityItem:
      type: object
      properties:
        entity_id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
        organization_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
    ContextCreateRequest:
      type: object
      required: [name, prompt, entity_ids]
      properties:
        name:
          type: string
        prompt:
          type: string
        entity_ids:
          type: array
          items:
            type: string
            format: uuid
    ContextItem:
      type: object
      properties:
        context_id:
          type: string
          format: uuid
        name:
          type: string
        prompt:
          type: string
        created_at:
          type: string
          format: date-time
        entities:
          type: array
          items:
            type: object
            properties:
              entity_id:
                type: string
                format: uuid
              name:
                type: string
              type:
                type: string
    ProfileResponse:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        organization_id:
          type: string
          format: uuid
        organization_name:
          type: string
        created_at:
          type: string
          format: date-time
    DocumentCreateRequest:
      type: object
      required: [entity_id, type, content]
      properties:
        entity_id:
          type: string
          format: uuid
        type:
          type: string
          enum: [transcript]
        content:
          type: string
    DocumentItem:
      type: object
      properties:
        document_id:
          type: string
          format: uuid
        entity_id:
          type: string
          format: uuid
        type:
          type: string
        content:
          type: string
        created_at:
          type: string
          format: date-time

paths:
  /:
    get:
      summary: Health check
      responses:
        "200":
          description: OK

  /register/:
    post:
      summary: Register a new user and organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "202":
          description: Registration accepted
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /login/:
    post:
      summary: Log in and receive JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
        "400":
          description: Missing credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /organization/{org_id}:
    put:
      summary: Update organization name
      security: [{ bearerAuth: [] }]
      parameters:
        - name: org_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationUpdateRequest"
      responses:
        "200":
          description: Organization updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  organization_id:
                    type: string
                    format: uuid
                  organization_name:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /entity/:
    post:
      summary: Create a new entity
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityCreateRequest"
      responses:
        "201":
          description: Entity created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/EntityItem"
                  - type: object
                    properties:
                      success:
                        type: boolean
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /entities/:
    get:
      summary: List all entities in user's organization
      security: [{ bearerAuth: [] }]
      parameters:
        - name: created_after
          in: query
          schema:
            type: string
            format: date-time
        - name: type
          in: query
          schema:
            type: string
            enum: [startup, mentor]
        - name: name
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Entity list
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityItem"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /entity/{entity_id}:
    get:
      summary: Get entity details
      security: [{ bearerAuth: [] }]
      parameters:
        - name: entity_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Entity detail
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/EntityItem"
                  - type: object
                    properties:
                      document_ids:
                        type: array
                        items:
                          type: string
                          format: uuid
        "401":
          description: Unauthorized
        "404":
          description: Not found

  /context/:
    post:
      summary: Create context and run matching
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContextCreateRequest"
      responses:
        "201":
          description: Context created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  context_id:
                    type: string
                    format: uuid
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "401":
          description: Unauthorized
        "404":
          description: Not found

  /contexts/:
    get:
      summary: List contexts user can access
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Context list
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        created_at:
                          type: string
                          format: date-time
        "401":
          description: Unauthorized

  /context/{context_id}:
    get:
      summary: Get context details
      security: [{ bearerAuth: [] }]
      parameters:
        - name: context_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Context detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContextItem"
        "401":
          description: Unauthorized
        "404":
          description: Not found

  /profile/:
    get:
      summary: Get user profile
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Profile details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileResponse"
        "401":
          description: Unauthorized

  /document/:
    post:
      summary: Upload document (transcript only)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentCreateRequest"
      responses:
        "201":
          description: Document created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentItem"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "401":
          description: Unauthorized
        "404":
          description: Not found

  /document/{document_id}:
    get:
      summary: Get document details
      security: [{ bearerAuth: [] }]
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Document detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentItem"
        "401":
          description: Unauthorized
        "404":
          description: Not found
