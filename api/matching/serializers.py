from rest_framework import serializers
from .models import Tenant, EntityType, Context, Entity, Document, Chunk, Match, StatusUpdate, Feedback


class TenantSerializer(serializers.ModelSerializer):
    """
    Serializer for the Tenant model.
    
    Provides serialization/deserialization of Tenant objects, allowing
    CRUD operations via the API. Exposes all fields from the Tenant model.
    """
    class Meta:
        model = Tenant
        fields = '__all__'  # Includes 'id' and 'name' fields


class EntityTypeSerializer(serializers.ModelSerializer):
    """
    Serializer for the EntityType model.
    
    Provides serialization/deserialization of EntityType objects,
    including their association with a tenant. Exposes all fields
    from the EntityType model for API operations.
    """
    class Meta:
        model = EntityType
        fields = '__all__'  # Includes 'id', 'tenant', and 'name' fields


class ContextSerializer(serializers.ModelSerializer):
    """
    Serializer for the Context model.
    
    Provides serialization/deserialization of Context objects, including
    their relationships with tenant, entity types, seeker, and resource.
    Exposes all fields for comprehensive API access.
    """
    class Meta:
        model = Context
        fields = '__all__'  # Includes all fields including relationships


class EntitySerializer(serializers.ModelSerializer):
    """
    Serializer for the Entity model.
    
    Provides serialization/deserialization of Entity objects, including
    their relationships with tenant, context, and entity type.
    Enables full CRUD operations through the API.
    """
    class Meta:
        model = Entity
        fields = '__all__'  # Includes 'id', 'tenant', 'context', and 'entity_type' fields


class DocumentSerializer(serializers.ModelSerializer):
    """
    Serializer for the Document model.
    
    Provides serialization/deserialization of Document objects, which
    contain textual information about entities. Exposes all fields
    including the relationship to an entity.
    """
    class Meta:
        model = Document
        fields = '__all__'  # Includes 'id', 'entity', 'title', and 'text' fields


class ChunkSerializer(serializers.ModelSerializer):
    """
    Serializer for the Chunk model.
    
    Provides serialization/deserialization of Chunk objects, which contain
    text segments with their corresponding embedding vectors. The embedding
    field contains a vector generated by the Mistral AI embed model.
    
    Note: While the embedding field is included in the serializer, the vector
    data is typically large and may be handled specially in API responses.
    """
    class Meta:
        model = Chunk
        fields = '__all__'  # Includes 'id', 'document', 'text', and 'embedding' fields


class MatchSerializer(serializers.ModelSerializer):
    """
    Serializer for the Match model.
    
    Provides serialization/deserialization of Match objects, which represent
    pairings between seeker and resource entities within a context.
    Includes support for the match versioning system through the parent field.
    
    Note: The serializer includes nested data like feedback and status updates
    when retrieving a match, but these are not required for creating/updating.
    """
    # Including count of feedback items for this match
    feedback_count = serializers.SerializerMethodField()
    # Including count of status updates for this match
    updates_count = serializers.SerializerMethodField()
    
    class Meta:
        model = Match
        fields = '__all__'  # Includes all fields plus the additional counts
    
    def get_feedback_count(self, obj):
        """Return the count of feedback items for this match."""
        return obj.feedback.count()
    
    def get_updates_count(self, obj):
        """Return the count of status updates for this match."""
        return obj.status_updates.count()


class StatusUpdateSerializer(serializers.ModelSerializer):
    """
    Serializer for the StatusUpdate model.
    
    Provides serialization/deserialization of StatusUpdate objects, which
    track system actions, intermediate evaluations, or reasoning steps
    during the matching process.
    """
    # Human-readable representation of source choice
    source_display = serializers.CharField(source='get_source_display', read_only=True)
    
    class Meta:
        model = StatusUpdate
        fields = '__all__'  # Includes all fields plus the source display


class FeedbackSerializer(serializers.ModelSerializer):
    """
    Serializer for the Feedback model.
    
    Provides serialization/deserialization of Feedback objects, which
    contain user or reviewer input on contexts or specific matches.
    This feedback can lead to new versioned matches being created.
    """
    class Meta:
        model = Feedback
        fields = '__all__'  # Includes 'id', 'context', 'match', 'text', 'created_at' fields
