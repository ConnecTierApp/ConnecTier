# Generated by Django 4.2.21 on 2025-05-31 16:27

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import pgvector.django.vector
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('matching', '0001_create_vector_extension'),
    ]

    operations = [
        migrations.CreateModel(
            name='Context',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('name', models.CharField(max_length=255)),
                ('prompt', models.TextField(help_text='Instructions used for the matching process')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('context', models.ForeignKey(help_text='The matching context this entity belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='matching.context')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('score', models.FloatField(blank=True, help_text='Similarity score or ranking value', null=True)),
                ('notes', models.TextField(blank=True, help_text='Summary or explanation of why this match was made', null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this match was created')),
                ('context', models.ForeignKey(help_text='The context in which this match was created', on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='matching.context')),
                ('parent', models.ForeignKey(blank=True, help_text='Reference to a previous version of this match', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='versions', to='matching.match')),
                ('resource', models.ForeignKey(help_text='The entity providing resources or assistance', on_delete=django.db.models.deletion.CASCADE, related_name='resource_matches', to='matching.entity')),
                ('seeker', models.ForeignKey(help_text='The entity seeking resources or assistance', on_delete=django.db.models.deletion.CASCADE, related_name='seeker_matches', to='matching.entity')),
            ],
            options={
                'verbose_name_plural': 'matches',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StatusUpdate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('message', models.TextField(help_text='The content of this status update')),
                ('source', models.CharField(choices=[('system', 'System'), ('llm', 'Language Model'), ('human', 'Human')], default='system', help_text='Source of this status update', max_length=10)),
                ('context', models.ForeignKey(help_text='The context this update relates to', on_delete=django.db.models.deletion.CASCADE, related_name='status_updates', to='matching.context')),
                ('entities', models.ManyToManyField(blank=True, help_text='Entities involved in this status update', related_name='status_updates', to='matching.entity')),
                ('match', models.ForeignKey(blank=True, help_text='Specific match this update relates to (if any)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='status_updates', to='matching.match')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('text', models.TextField(help_text='The content of the feedback')),
                ('context', models.ForeignKey(help_text='The context this feedback relates to', on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='matching.context')),
                ('match', models.ForeignKey(blank=True, help_text='Specific match this feedback relates to (if any)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='matching.match')),
            ],
            options={
                'verbose_name_plural': 'feedback',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EntityType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('name', models.CharField(max_length=255)),
                ('tenant', models.ForeignKey(help_text='The tenant this entity type belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='entity_types', to='matching.tenant')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='entity',
            name='entity_type',
            field=models.ForeignKey(help_text="The type of this entity (e.g., 'startup', 'investor')", on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='matching.entitytype'),
        ),
        migrations.AddField(
            model_name='entity',
            name='tenant',
            field=models.ForeignKey(help_text='The tenant this entity belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='matching.tenant'),
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('title', models.CharField(blank=True, help_text='Optional title for the document', max_length=255, null=True)),
                ('text', models.TextField(help_text='The complete text content of the document')),
                ('entity', models.ForeignKey(help_text='The entity this document describes', on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='matching.entity')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='context',
            name='entity_types',
            field=models.ManyToManyField(help_text='Entity types that can participate in this context', related_name='contexts', to='matching.entitytype'),
        ),
        migrations.AddField(
            model_name='context',
            name='resource',
            field=models.ForeignKey(help_text="The entity type that is being sought (e.g., 'investor')", on_delete=django.db.models.deletion.CASCADE, related_name='resource_contexts', to='matching.entitytype'),
        ),
        migrations.AddField(
            model_name='context',
            name='seeker',
            field=models.ForeignKey(help_text="The entity type that is seeking matches (e.g., 'startup')", on_delete=django.db.models.deletion.CASCADE, related_name='seeker_contexts', to='matching.entitytype'),
        ),
        migrations.AddField(
            model_name='context',
            name='tenant',
            field=models.ForeignKey(help_text='The tenant this context belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='contexts', to='matching.tenant'),
        ),
        migrations.CreateModel(
            name='Chunk',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('text', models.TextField(help_text='The text content of this chunk')),
                ('embedding', pgvector.django.vector.VectorField(dimensions=1024, help_text='Vector embedding generated by Mistral AI embed model')),
                ('document', models.ForeignKey(help_text='The document this chunk is extracted from', on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='matching.document')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
    ]
