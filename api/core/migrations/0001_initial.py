# Generated by Django 4.2.21 on 2025-05-24 12:23

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Chunk',
            fields=[
                ('id', models.UUIDField(editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('content', models.TextField()),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Context',
            fields=[
                ('id', models.UUIDField(editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('name', models.CharField(max_length=255)),
                ('prompt', models.TextField()),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.UUIDField(editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=64)),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.UUIDField(editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('context', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='core.context')),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_matches', to='core.entity')),
                ('startup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='startup_matches', to='core.entity')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.UUIDField(editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.UUIDField(editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('timestamp', models.DateTimeField()),
                ('sender', models.CharField(max_length=64)),
                ('content', models.TextField()),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.match')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='entity',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='core.organization'),
        ),
        migrations.CreateModel(
            name='Embedding',
            fields=[
                ('id', models.UUIDField(editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('vector', models.JSONField()),
                ('chunk', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='embedding', to='core.chunk')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.UUIDField(editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('type', models.CharField(max_length=64)),
                ('content', models.TextField()),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='core.entity')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='context',
            name='entities',
            field=models.ManyToManyField(related_name='contexts', to='core.entity'),
        ),
        migrations.AddField(
            model_name='chunk',
            name='document',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='core.document'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(editable=False, help_text='A unique identifier for the record.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the record was last updated.')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='core.organization')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
